{"version":3,"file":"loop.js","sourceRoot":"","sources":["../usr/local/google/home/tdresser/github/wooper/tmp/broccoli_type_script_compiler-input_base_path-Sv8Ze6Xq.tmp/0/src/app/loop.ts"],"names":[],"mappings":"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","sourcesContent":["import 'msr';\n\ndeclare class MediaStreamRecorder {\n    constructor(stream: any);\n    mimeType: string;\n    recorderType: any;\n    stream: any;\n\n    // timeslice is how frequently ondataavailable gets called.\n    start(timeslice: number): void;\n    stop(): void;\n    pause(): void;\n    resume(): void;\n\n    ondataavailable(blob: any): void;\n\n    save(blob: any, filename?: string): void;\n}\n\ndeclare interface Navigator {\n    getUserMedia(constraints: any, success: any, error: any): void;\n}\ndeclare var navigator: Navigator;\n\ndeclare interface BlobConcatenator {\n    ConcatenateBlobs(blobs: any[], blobType: any, callback: (concatenatedblob: any) => void): void;\n}\ndeclare var window: BlobConcatenator;\n\nexport enum PlayState {\n    Empty,\n    Recording,\n    Playing,\n    Stopped\n}\n\nexport class Loop {\n    private lengthInSeconds: number;\n    private buffer: number[];\n    private _playState: PlayState;\n    private mediaRecorder: MediaStreamRecorder;\n    private blobs: any[];\n\n    constructor() {\n        this._playState = PlayState.Empty;\n    }\n\n    public startRecording(): void {\n        console.assert(this.playState === PlayState.Empty);\n        this._playState = PlayState.Recording;\n        let mediaConstraints = {\n            audio: true\n        };\n        navigator.getUserMedia(mediaConstraints,\n            (stream => { this.onMediaSuccess(stream); }),\n            onMediaError);\n    }\n\n    public stopRecording(): void {\n        console.assert(this._playState === PlayState.Recording);\n        this._playState = PlayState.Playing;\n        this.mediaRecorder.stop();\n        this.mediaRecorder.stream.stop();\n        console.log('stopRecording');\n        // TODO(harimau): Concatenate the blobs.\n        console.log('blobs', this.blobs);\n        // TODO(harimau): Start playing the recording.\n    }\n\n    public stopPlaying(): void {\n        console.assert(this._playState === PlayState.Playing);\n        this._playState = PlayState.Stopped;\n        window.ConcatenateBlobs(this.blobs, this.blobs[0].type, (concatenatedBlob => {\n            this.mediaRecorder.save(concatenatedBlob);\n        }));\n    }\n\n    public startPlaying(): void {\n        console.assert(this._playState === PlayState.Stopped, PlayState[this._playState]);\n        this._playState = PlayState.Playing;\n    }\n\n    public clear(): void {\n        this._playState = PlayState.Empty;\n    }\n\n    public save(): void {\n        console.log(\"Saving loop\");\n    }\n\n\n    public get playState(): PlayState {\n        return this._playState;\n    }\n\n    public mergeWith(sourceLoop): void {\n        this._playState = sourceLoop.playState;\n    }\n\n    public load(dataURL:string): void {\n        console.log(\"LOADING Loop\");\n        console.log(dataURL);\n    }\n\n    private onMediaSuccess(stream: any): void {\n        this.mediaRecorder = new MediaStreamRecorder(stream);\n        this.mediaRecorder.stream = stream;\n        this.mediaRecorder.mimeType = 'audio/wav';\n        this.mediaRecorder.ondataavailable = (blob => {\n            console.log('Recorded audio blob');\n            this.blobs.push(blob);\n        });\n        this.mediaRecorder.start(20000);\n    }\n}\n\nfunction onMediaError(error: any): void {\n    console.log('Error requesting microphone', error);\n}\n"]}